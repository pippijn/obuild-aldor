-------------------------------------------------------------------------
--
-- cs_gbalg.as
--
-------------------------------------------------------------------------

#include "charset.as"



+++\begin{addescription}{is a model for algorithms computing Gröbner bases.}
+++For the description of \adthistype, let \adcode{T} refer to an implementation of a polynomial ring.
+++
+++Given a set of polynomials $B$, implementations of \adthistype compute a set $F$, such that $F$ is a Gröbner basis of $(B)$, where $(B)$ denotes the ideal generated by $B$. $F$ is a Gröbner basis for $(B)$ if and only if $F$ reduces every element of $(B)$ to $0$. 
+++
+++All four \adname{groebnerBasis} functions have to implement the same algorithm to compute a Gröbner basis.
+++\end{addescription}
+++\begin{adremarks}
+++\adthistype does not specify, what reduction is used. The specification of the used reduction is up to the domains implementing \adthistype.
+++\end{adremarks}
GroebnerBasisAlgorithmType(
  T: TriangularizationTType
) : Category == with {

    +++\begin{addescription}{computes a Gröbner basis of a \adtype{Generator}}
    +++\end{addescription}
    groebnerBasis : Generator T -> List T;

    +++\begin{addescription}{computes a Gröbner basis of a \adtype{Generator}}
    +++The additional return value of \adtype{Set} \adcode{T} holds those elements of \adcode{T} that have been used to multiply by.
    +++\end{addescription}
    groebnerBasis : Generator T -> ( List T, Set T );

    +++\begin{addescription}{computes a Gröbner basis of a \adtype{List}}
    +++\end{addescription}
    groebnerBasis : List T -> List T;
    
    +++\begin{addescription}{computes a Gröbner basis of a \adtype{List}}
    +++The additional return value of \adtype{Set} \adcode{T} holds those elements of \adcode{T} that have been used to multiply by.
    +++\end{addescription}
    groebnerBasis : List T -> ( List T, Set T );
    
    default {
	
	-------------------------------------
	
	groebnerBasis( a: List T ): List T == {
	    ( tr: List T, premult: Set T) := groebnerBasis a;
	    tr;
	}

	-------------------------------------
	
	groebnerBasis( a: List T ): ( List T, Set T ) == {
	    groebnerBasis generator a;
	}

	-------------------------------------
	
	groebnerBasis( a: Generator T ): List T == {
	    ( tr: List T, premult: Set T) := groebnerBasis a;
	    tr;
	}

	-------------------------------------
	
    }
    
}